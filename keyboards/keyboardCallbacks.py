from starter import *

from aiogram.utils.keyboard import InlineKeyboardMarkup

from .buttons import *
import keyboards.keyboardFabric as keyboardFabric
import keyboards.messageGenerator as messageGenerator
import myUtils.Json as Json
from myUtils.fastFunctions.buttons import show_basket

@dp.message(F.text.in_(
    [button[0] for button in Json.getMainDataset()["menu"]]
    # ['–ù–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', '–ë/—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', '–ö—Ä–∞—Å–æ—Ç–∞', '–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏', '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', '–ö–æ—Ä–∑–∏–Ω–∞', '–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', '–î–æ—Å—Ç–∞–≤–∫–∞ / –æ–ø–ª–∞—Ç–∞']
))
async def buttons_header(message: Message, state: FSMContext):
    await message.delete()

    if message.text == "–ö–æ—Ä–∑–∏–Ω–∞":
        await show_basket(user_id=message.from_user.id, state=state, message=message)
    
    elif message.text == "–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º":
        chat = CRUD.for_model(Communication).get(db_session, user_id=message.from_user.id)
        if len(chat) == 0:
            CRUD.for_model(Communication).create(db_session, user_id=message.from_user.id)
            chat = CRUD.for_model(Communication).get(db_session, user_id=message.from_user.id)
        chat = chat[0]
        await message.answer(
            "–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —á–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞", 
            reply_markup=keyboardFabric.createCustomInlineKeyboard([
                InlineButton(
                    "–û—Ç–º–µ–Ω–∏—Ç—å",
                    "delete_message"
        )]))
        await state.set_state(StatesForManager.userCommunicate)
    
    elif message.text == "–î–æ—Å—Ç–∞–≤–∫–∞ / –æ–ø–ª–∞—Ç–∞":
        # TODO –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏ –ø–æ—Å–ª–µ–¥—É—é—â—É—é –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫—É
        # basket = CRUD.for_model(Basket).get(db_session, user_id=message.from_user.id)
        # text = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∂–µ–ª–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ –Ω–∞–∂–∞—Ç—å "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É'
        # buttons = []
        # for basket_position in basket:
        #     product = CRUD.for_model(Product).get(db_session, id=basket_position.products_id)[0]
        #     buttons.append(InlineButton(product.name + " ‚ùå", "basket_check__" + str(product.id)))

        # await state.set_data({"isBasket": True})
        # keyboard = keyboardFabric.createCustomInlineKeyboard([
        #         InlineButton(
        #             "–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üóë",
        #             "delete_message"
        # )])

        # current_message = message.answer(text, reply_markup=keyboard)
        if len(CRUD.for_model(Basket).get(db_session, user_id=message.from_user.id)) != 0:
            keyboard = keyboardFabric.createCustomInlineKeyboard([
                InlineButton(
                    "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é üí≥",
                    "register_basket"
                ),
                InlineButton(
                    "–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üóë",
                    "delete_message"
                )
            ])
            current_message = await message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é", reply_markup=keyboard)
            data = await state.get_data()
            data.update({'current_message': current_message})
        else:
            await message.answer("–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç! –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É",
                reply_markup=keyboardFabric.createCustomInlineKeyboard([
                    InlineButton(
                        "–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
                        "manager"
                    )
                ])
            )

    else:
        for button in Json.getMainDataset()["menu"]:
            if button[0] == message.text:
                mg = messageGenerator.MessageGenerator(button[1])
                await message.answer(
                    mg.getText(),
                    reply_markup = mg.getInlineKeyboard()
                )